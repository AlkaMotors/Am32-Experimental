<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AM32_TBS_12S_F421.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AM32_TBS_12S_F421.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Jun 17 20:14:32 2024
<BR><P>
<H3>Maximum Stack Usage =        140 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
DMA1_Channel5_4_IRQHandler &rArr; transfercomplete &rArr; computeDshotDMA &rArr; saveEEpromSettings &rArr; save_flash_nolib
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[37]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">CRM_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">CRM_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC1_CMP_IRQHandler</a> from at32f421_it.o(.text.ADC1_CMP_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from at32f421_it.o(.text.BusFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[e]">CRM_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[12]">DMA1_Channel1_IRQHandler</a> from at32f421_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[13]">DMA1_Channel3_2_IRQHandler</a> from at32f421_it.o(.text.DMA1_Channel3_2_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[14]">DMA1_Channel5_4_IRQHandler</a> from at32f421_it.o(.text.DMA1_Channel5_4_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from at32f421_it.o(.text.DebugMon_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[c]">ERTC_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[11]">EXINT15_4_IRQHandler</a> from at32f421_it.o(.text.EXINT15_4_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[f]">EXINT1_0_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[10]">EXINT3_2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[d]">FLASH_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from at32f421_it.o(.text.HardFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[24]">I2C1_ERR_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1e]">I2C1_EVT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[25]">I2C2_ERR_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1f]">I2C2_EVT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from at32f421_it.o(.text.MemManage_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from at32f421_it.o(.text.NMI_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[b]">PVM_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from at32f421_it.o(.text.PendSV_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[20]">SPI1_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[21]">SPI2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from at32f421_it.o(.text.SVC_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from at32f421_it.o(.text.SysTick_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_at32f421.o(.text.SystemInit) referenced from startup_at32f421.o(.text)
 <LI><a href="#[1a]">TMR14_GLOBAL_IRQHandler</a> from at32f421_it.o(.text.TMR14_GLOBAL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1b]">TMR15_GLOBAL_IRQHandler</a> from at32f421_it.o(.text.TMR15_GLOBAL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1c]">TMR16_GLOBAL_IRQHandler</a> from at32f421_it.o(.text.TMR16_GLOBAL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1d]">TMR17_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[16]">TMR1_BRK_OVF_TRG_HALL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[17]">TMR1_CH_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[18]">TMR3_GLOBAL_IRQHandler</a> from at32f421_it.o(.text.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[19]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from at32f421_it.o(.text.USART1_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[23]">USART2_IRQHandler</a> from at32f421_it.o(.text.USART2_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from at32f421_it.o(.text.UsageFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_at32f421.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[c5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[da]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[db]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[33]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[29]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; crsf_UART_Init &rArr; usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[32]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[34]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ERTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXINT1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXINT3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TMR17_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR1_BRK_OVF_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f421.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[31]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ee]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>ADC1_CMP_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f421_it.o(.text.ADC1_CMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_CMP_IRQHandler &rArr; interruptRoutine
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptRoutine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC_DMA_Callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, adc.o(.text.ADC_DMA_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>ADC_Init</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Init &rArr; adc_ordinary_channel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_adc_clock_div_set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_tempersensor_vintrv_enable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_trigger_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_status_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_start
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init_status_get
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_config
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_default_para_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCorePeripherals
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, at32f421_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel3_2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at32f421_it.o(.text.DMA1_Channel3_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel5_4_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, at32f421_it.o(.text.DMA1_Channel5_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = DMA1_Channel5_4_IRQHandler &rArr; transfercomplete &rArr; computeDshotDMA &rArr; saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXINT15_4_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f421_it.o(.text.EXINT15_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = EXINT15_4_IRQHandler &rArr; processDshot &rArr; computeDshotDMA &rArr; saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDshot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MX_IWDG_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, peripherals.o(.text.MX_IWDG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>PeriodElapsedCallback</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, main.o(.text.PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PeriodElapsedCallback &rArr; comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCompInterrupts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeCompInput
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR16_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_at32f421.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>TIM1_Init</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, peripherals.o(.text.TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_Init &rArr; gpio_pin_mux_config
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_buffer_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_buffer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCorePeripherals
</UL>

<P><STRONG><a name="[1a]"></a>TMR14_GLOBAL_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_it.o(.text.TMR14_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TMR14_GLOBAL_IRQHandler &rArr; tenKhzRoutine &rArr; zcfoundroutine &rArr; comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TMR15_GLOBAL_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f421_it.o(.text.TMR15_GLOBAL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TMR16_GLOBAL_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f421_it.o(.text.TMR16_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR16_GLOBAL_IRQHandler &rArr; PeriodElapsedCallback &rArr; comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodElapsedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f421_it.o(.text.TMR3_GLOBAL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UN_TIM_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, peripherals.o(.text.UN_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UN_TIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f421_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; setChannels &rArr; map
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannels
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveCRSF
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f421_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; setChannels &rArr; map
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannels
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveCRSF
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f421_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>adc_base_config</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_base_config))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[42]"></a>adc_base_default_para_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_base_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[49]"></a>adc_calibration_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_calibration_init))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4a]"></a>adc_calibration_init_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_calibration_init_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4b]"></a>adc_calibration_start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_calibration_start))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4c]"></a>adc_calibration_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_calibration_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[47]"></a>adc_dma_mode_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[48]"></a>adc_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[44]"></a>adc_ordinary_channel_set</STRONG> (Thumb, 602 bytes, Stack size 8 bytes, at32f421_adc.o(.text.adc_ordinary_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[46]"></a>adc_ordinary_conversion_trigger_set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_ordinary_conversion_trigger_set))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[8b]"></a>adc_ordinary_software_trigger_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_ordinary_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>adc_tempersensor_vintrv_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f421_adc.o(.text.adc_tempersensor_vintrv_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[5e]"></a>allOff</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, phaseouts.o(.text.allOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBlueJayTune
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBrushedStartupTune
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playStartupTune
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBeaconTune3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playChangedTone
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDefaultTone
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[5f]"></a>allpwm</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, phaseouts.o(.text.allpwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = allpwm
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>changeCompInput</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, comparator.o(.text.changeCompInput))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcfoundroutine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMotor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodElapsedCallback
</UL>

<P><STRONG><a name="[74]"></a>cmp_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f421_cmp.o(.text.cmp_enable))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCorePeripherals
</UL>

<P><STRONG><a name="[52]"></a>comStep</STRONG> (Thumb, 952 bytes, Stack size 24 bytes, phaseouts.o(.text.comStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBlueJayTune
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBrushedStartupTune
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playStartupTune
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcfoundroutine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBeaconTune3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playChangedTone
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDefaultTone
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMotor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodElapsedCallback
</UL>

<P><STRONG><a name="[60]"></a>computeDshotDMA</STRONG> (Thumb, 1224 bytes, Stack size 64 bytes, dshot.o(.text.computeDshotDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = computeDshotDMA &rArr; saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveEEpromSettings
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDshot
</UL>

<P><STRONG><a name="[63]"></a>computeServoInput</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, signal.o(.text.computeServoInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = computeServoInput &rArr; saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playChangedTone
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDefaultTone
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbsDif
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveEEpromSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
</UL>

<P><STRONG><a name="[41]"></a>crm_adc_clock_div_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f421_crm.o(.text.crm_adc_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[af]"></a>crm_clocks_freq_get</STRONG> (Thumb, 264 bytes, Stack size 20 bytes, at32f421_crm.o(.text.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[3c]"></a>crm_periph_clock_enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f421_crm.o(.text.crm_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UN_TIM_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCorePeripherals
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[ad]"></a>crm_periph_reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f421_crm.o(.text.crm_periph_reset))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
</UL>

<P><STRONG><a name="[68]"></a>crsf_UART_Init</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, peripherals.o(.text.crsf_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = crsf_UART_Init &rArr; usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_single_line_halfduplex_select
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receiver_enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>delayMicros</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, functions.o(.text.delayMicros))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
</UL>

<P><STRONG><a name="[96]"></a>delayMillis</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, functions.o(.text.delayMillis))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBlueJayTune
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBrushedStartupTune
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playStartupTune
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBeaconTune3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playChangedTone
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDefaultTone
</UL>

<P><STRONG><a name="[ae]"></a>detectInput</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, signal.o(.text.detectInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = detectInput
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
</UL>

<P><STRONG><a name="[40]"></a>dma_channel_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f421_dma.o(.text.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[3e]"></a>dma_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f421_dma.o(.text.dma_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4d]"></a>dma_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f421_dma.o(.text.dma_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>dma_init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, at32f421_dma.o(.text.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[3d]"></a>dma_reset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, at32f421_dma.o(.text.dma_reset))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[54]"></a>enableCompInterrupts</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comparator.o(.text.enableCompInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcfoundroutine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMotor
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriodElapsedCallback
</UL>

<P><STRONG><a name="[70]"></a>enableCorePeripherals</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, peripherals.o(.text.enableCorePeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enableCorePeripherals &rArr; ADC_Init &rArr; adc_ordinary_channel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>flash_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f421_flash.o(.text.flash_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>

<P><STRONG><a name="[a1]"></a>flash_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_flash.o(.text.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>

<P><STRONG><a name="[9e]"></a>flash_sector_erase</STRONG> (Thumb, 398 bytes, Stack size 0 bytes, at32f421_flash.o(.text.flash_sector_erase))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>

<P><STRONG><a name="[9d]"></a>flash_unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at32f421_flash.o(.text.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>

<P><STRONG><a name="[9f]"></a>flash_word_program</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, at32f421_flash.o(.text.flash_word_program))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>

<P><STRONG><a name="[72]"></a>fullBrake</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, phaseouts.o(.text.fullBrake))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fullBrake
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[92]"></a>generatePwmTimerEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, peripherals.o(.text.generatePwmTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>getAbsDif</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, functions.o(.text.getAbsDif))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeServoInput
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[76]"></a>getCompOutputLevel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comparator.o(.text.getCompOutputLevel))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptRoutine
</UL>

<P><STRONG><a name="[61]"></a>getInputPinState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io.o(.text.getInputPinState))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDshotDMA
</UL>

<P><STRONG><a name="[69]"></a>gpio_init</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, at32f421_gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[3b]"></a>gpio_mode_QUICK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, functions.o(.text.gpio_mode_QUICK))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allpwm
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UN_TIM_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCorePeripherals
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoChannelReverse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoChannelForward
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proportionalBrake
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullBrake
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[a7]"></a>gpio_mode_set</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, functions.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInputPullUp
</UL>

<P><STRONG><a name="[58]"></a>gpio_pin_mux_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at32f421_gpio.o(.text.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
</UL>

<P><STRONG><a name="[7b]"></a>initAfterJump</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, peripherals.o(.text.initAfterJump))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>initCorePeripherals</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, peripherals.o(.text.initCorePeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = initCorePeripherals &rArr; TIM1_Init &rArr; gpio_pin_mux_config
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_enable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>interruptRoutine</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, main.o(.text.interruptRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interruptRoutine
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskPhaseInterrupts
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCompOutputLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_CMP_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>loadEEpromSettings</STRONG> (Thumb, 1036 bytes, Stack size 32 bytes, main.o(.text.loadEEpromSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = loadEEpromSettings &rArr; read_flash_bin
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_bin
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 3260 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = main &rArr; crsf_UART_Init &rArr; usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInputCaptureTimer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generatePwmTimerEvent
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allpwm
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_telem_DMA
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeTelemPackage
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInputPullUp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveDshotDma
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UN_TIM_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBrushedStartupTune
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playStartupTune
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveCRSF
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCorePeripherals
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCorePeripherals
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAfterJump
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMCompare3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMCompare2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMCompare1
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proportionalBrake
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskPhaseInterrupts
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCompInterrupts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeCompInput
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadEEpromSettings
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicros
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbsDif
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dshot_package
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDshotDMA
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[89]"></a>makeTelemPackage</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, serial_telemetry.o(.text.makeTelemPackage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = makeTelemPackage
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>make_dshot_package</STRONG> (Thumb, 484 bytes, Stack size 36 bytes, dshot.o(.text.make_dshot_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = make_dshot_package
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDshot
</UL>

<P><STRONG><a name="[66]"></a>map</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, functions.o(.text.map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannels
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeServoInput
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadEEpromSettings
</UL>

<P><STRONG><a name="[75]"></a>maskPhaseInterrupts</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, comparator.o(.text.maskPhaseInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interruptRoutine
</UL>

<P><STRONG><a name="[aa]"></a>nvic_irq_enable</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, at32f421_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
</UL>

<P><STRONG><a name="[95]"></a>playBeaconTune3</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sounds.o(.text.playBeaconTune3))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = playBeaconTune3 &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[97]"></a>playBlueJayTune</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, sounds.o(.text.playBlueJayTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = playBlueJayTune &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playStartupTune
</UL>

<P><STRONG><a name="[7e]"></a>playBrushedStartupTune</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, sounds.o(.text.playBrushedStartupTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = playBrushedStartupTune &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>playChangedTone</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sounds.o(.text.playChangedTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = playChangedTone &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeServoInput
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[67]"></a>playDefaultTone</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sounds.o(.text.playDefaultTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = playDefaultTone &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeServoInput
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[98]"></a>playInputTune</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sounds.o(.text.playInputTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = playInputTune &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>

<P><STRONG><a name="[99]"></a>playInputTune2</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sounds.o(.text.playInputTune2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = playInputTune2 &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[7d]"></a>playStartupTune</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, sounds.o(.text.playStartupTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = playStartupTune &rArr; playBlueJayTune &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBlueJayTune
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>processDshot</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text.processDshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = processDshot &rArr; computeDshotDMA &rArr; saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dshot_package
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDshotDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_4_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>proportionalBrake</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, phaseouts.o(.text.proportionalBrake))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proportionalBrake
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[78]"></a>read_flash_bin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, eeprom.o(.text.read_flash_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_flash_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadEEpromSettings
</UL>

<P><STRONG><a name="[5d]"></a>receiveCRSF</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, peripherals.o(.text.receiveCRSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = receiveCRSF
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receiver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>receiveDshotDma</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, io.o(.text.receiveDshotDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = receiveDshotDma &rArr; tmr_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>resetInputCaptureTimer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, peripherals.o(.text.resetInputCaptureTimer))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>runBrushedLoop</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, main.o(.text.runBrushedLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = runBrushedLoop &rArr; twoChannelReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoChannelReverse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twoChannelForward
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMCompare3
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMCompare2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWMCompare1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicros
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>saveEEpromSettings</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(.text.saveEEpromSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_flash_nolib
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeServoInput
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDshotDMA
</UL>

<P><STRONG><a name="[7c]"></a>save_flash_nolib</STRONG> (Thumb, 290 bytes, Stack size 36 bytes, eeprom.o(.text.save_flash_nolib))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_flag_clear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveEEpromSettings
</UL>

<P><STRONG><a name="[a2]"></a>sendDshotDma</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, io.o(.text.sendDshotDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sendDshotDma &rArr; tmr_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfercomplete
</UL>

<P><STRONG><a name="[8a]"></a>send_telem_DMA</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, serial_telemetry.o(.text.send_telem_DMA))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>setChannels</STRONG> (Thumb, 698 bytes, Stack size 24 bytes, crsf.o(.text.setChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setChannels &rArr; map
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>setInput</STRONG> (Thumb, 1742 bytes, Stack size 32 bytes, main.o(.text.setInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setInput &rArr; playBeaconTune3 &rArr; allOff
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proportionalBrake
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fullBrake
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBeaconTune3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playChangedTone
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDefaultTone
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allOff
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startMotor
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskPhaseInterrupts
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbsDif
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processDshot
</UL>

<P><STRONG><a name="[81]"></a>setInputPullUp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, io.o(.text.setInputPullUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setInputPullUp &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>setPWMCompare1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripherals.o(.text.setPWMCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
</UL>

<P><STRONG><a name="[8e]"></a>setPWMCompare2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripherals.o(.text.setPWMCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
</UL>

<P><STRONG><a name="[8f]"></a>setPWMCompare3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, peripherals.o(.text.setPWMCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
</UL>

<P><STRONG><a name="[79]"></a>setVolume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sounds.o(.text.setVolume))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadEEpromSettings
</UL>

<P><STRONG><a name="[a5]"></a>startMotor</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, main.o(.text.startMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = startMotor &rArr; comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCompInterrupts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeCompInput
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[7f]"></a>telem_UART_Init</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, serial_telemetry.o(.text.telem_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = telem_UART_Init &rArr; usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_single_line_halfduplex_select
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmitter_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>tenKhzRoutine</STRONG> (Thumb, 1276 bytes, Stack size 32 bytes, main.o(.text.tenKhzRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tenKhzRoutine &rArr; zcfoundroutine &rArr; comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zcfoundroutine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInputTune
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maskPhaseInterrupts
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCompOutputLevel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMillis
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR14_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>tmr_channel_enable</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, at32f421_tmr.o(.text.tmr_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCorePeripherals
</UL>

<P><STRONG><a name="[56]"></a>tmr_output_channel_buffer_enable</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, at32f421_tmr.o(.text.tmr_output_channel_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
</UL>

<P><STRONG><a name="[57]"></a>tmr_period_buffer_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_tmr.o(.text.tmr_period_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Init
</UL>

<P><STRONG><a name="[9a]"></a>tmr_reset</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, at32f421_tmr.o(.text.tmr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDshotDma
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveDshotDma
</UL>

<P><STRONG><a name="[4f]"></a>transfercomplete</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, signal.o(.text.transfercomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = transfercomplete &rArr; computeDshotDMA &rArr; saveEEpromSettings &rArr; save_flash_nolib
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDshotDma
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectInput
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeServoInput
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveDshotDma
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playBeaconTune3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAbsDif
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dshot_package
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInputPinState
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDshotDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_4_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>twoChannelForward</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, phaseouts.o(.text.twoChannelForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twoChannelForward
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
</UL>

<P><STRONG><a name="[9c]"></a>twoChannelReverse</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, phaseouts.o(.text.twoChannelReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twoChannelReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_QUICK
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
</UL>

<P><STRONG><a name="[6d]"></a>usart_dma_receiver_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_dma_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receiveCRSF
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[a9]"></a>usart_dma_transmitter_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_dma_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
</UL>

<P><STRONG><a name="[6e]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[5b]"></a>usart_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>usart_init</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, at32f421_usart.o(.text.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[6f]"></a>usart_interrupt_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[6b]"></a>usart_receiver_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[6c]"></a>usart_single_line_halfduplex_select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_single_line_halfduplex_select))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crsf_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>usart_transmitter_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f421_usart.o(.text.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telem_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>zcfoundroutine</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, main.o(.text.zcfoundroutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = zcfoundroutine &rArr; comStep
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableCompInterrupts
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeCompInput
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comStep
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>

<P><STRONG><a name="[b0]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[b4]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[b6]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>

<P><STRONG><a name="[b7]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[b9]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[ba]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[bc]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[be]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>

<P><STRONG><a name="[bd]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[b5]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInput
</UL>

<P><STRONG><a name="[bf]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runBrushedLoop
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tenKhzRoutine
</UL>

<P><STRONG><a name="[f5]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[b8]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[bb]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[f7]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[b3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[b2]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[c0]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadEEpromSettings
</UL>

<P><STRONG><a name="[c1]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[b1]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
